@page "/fetchdata"
@using BlazorApp.Shared 
@using BlazorApp.Client.Models
@using BlazorApp.Client.Components
@inject HttpClient httpClient

   <div class="top-row px-4">
           
            <a href="https://www.cflux.nl" target="_blank"> <img src="../O365-Banner-CFLUX_Logo" alt="CFLUX logo" style /></a>
        </div>
<div class="coin-app">
    <div class="coin-search">
        <h1 class="coin-text">Search a currency</h1>
        <form>
            <input type="text"
                   class="coin-input"
                   placeholder="Search"
                   @oninput="@((e) => { SearchText=(string)e.Value; OnSearchTermChange(); })"/>
        </form>
    </div>
    @if (filteredResponse == null)
    {
        Console.WriteLine("Null response");
        <p>Loading...</p>
    }

    else
    {
        foreach (CoinData coin in filteredResponse)
        {
            <CoinInfoTab Name="@coin.name" Price="@coin.current_price" Symbol="@coin.symbol" MarketCap="@coin.market_cap" Volume="@coin.total_volume" PriceChange="@coin.price_change_percentage_24h" Image="@coin.image" />
        }
    }

</div>





@code
{
    public string SearchText { get; set; } = "";

    public List<CoinData> response;
    public List<CoinData> filteredResponse = new List<CoinData>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("FetchData.OnInitializedAsync() called...");

        response = await httpClient.GetFromJsonAsync<List<CoinData>>("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false");

        filteredResponse.AddRange(response);
    }

    public void OnSearchTermChange()
    {
        Console.WriteLine("OnSearchTermChange() called, search term = " + SearchText);
        filteredResponse = response.Where(coin => coin.name.ToLower().Contains(SearchText.ToLower())).ToList();
    }


}


@*@page "/fetchdata"
@using BlazorApp.Shared 
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts = new WeatherForecast[]{};

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast") ?? new WeatherForecast[]{};
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
}
*@